;; Created by Abb-token
;; DateTime: 2025-02-08 20:22:01 UTC

#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/constants.fc";
#include "imports/jetton-utils.fc";
#include "imports/op-codes.fc";
#include "imports/utils.fc";
#pragma version >=0.2.0;

;; Оптимизированные константы
const min_tons_for_storage = 10000000;    ;; 0.01 TON
const gas_consumption = 10000000;         ;; 0.01 TON
const message_base_fee = 10000000;        ;; 0.01 TON
const burn_notification_fee = 10000000;   ;; 0.01 TON
const min_tons_for_init = 10000000;       ;; 0.01 TON
const burn_rate = 50;                     ;; 0.005% (50 / 1000000)
const creator_fee_rate = 70;              ;; 0.007% (70 / 1000000)
const max_slice_bits = 1023;              ;; Максимальный размер slice в битах

{-
  Storage
  storage#_ balance:Coins owner_address:MsgAddressInt jetton_master_address:MsgAddressInt jetton_wallet_code:^Cell = Storage;
-}

(int, slice, slice, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (ds~load_coins(), ds~load_msg_addr(), ds~load_msg_addr(), ds~load_ref());
}

() save_data(int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) impure inline {
    set_data(pack_jetton_wallet_data(balance, owner_address, jetton_master_address, jetton_wallet_code));
}

() send_msg(slice to_address, int amount, cell msg_body, int mode) impure inline {
    cell msg = begin_cell()
        .store_uint(0x10, 6)            ;; nobounce
        .store_slice(to_address)         
        .store_coins(amount)
        .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(msg_body)
        .end_cell();
    send_raw_message(msg, mode);
}

() send_tokens(slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure {
    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    slice to_owner_address = in_msg_body~load_msg_addr();
    force_chain(to_owner_address);
    
    (int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();

    ;; Проверка на отправку самому себе
    cell state_init = calculate_jetton_wallet_state_init(to_owner_address, jetton_master_address, jetton_wallet_code);
    slice to_wallet_address = calculate_jetton_wallet_address(state_init);
    slice my_address = my_address();
    
    ;; Запрещаем отправку самому себе
    throw_if(710, equal_slices(to_wallet_address, my_address));

    throw_unless(705, equal_slices(owner_address, sender_address));
    throw_unless(706, balance >= jetton_amount);

    int burn_amount = muldiv(jetton_amount, burn_rate, 1000000);
    int creator_fee = muldiv(jetton_amount, creator_fee_rate, 1000000);
    int transfer_amount = jetton_amount - burn_amount - creator_fee;

    slice response_address = in_msg_body~load_msg_addr();
    cell custom_payload = in_msg_body~load_dict();
    int forward_ton_amount = in_msg_body~load_coins();

    int forward_fee = fwd_fee + gas_consumption;
    int total_amount = min_tons_for_init + forward_ton_amount + forward_fee;
    
    throw_unless(709, msg_value >= total_amount);

    balance -= jetton_amount;

    ;; Отправляем уведомление о сжигании
    if (burn_amount > 0) {
        cell burn_msg = begin_cell()
            .store_uint(op::burn_notification(), 32)
            .store_uint(query_id, 64)
            .store_coins(burn_amount)
            .store_slice(owner_address)
            .store_slice(response_address)
            .end_cell();

        send_msg(jetton_master_address, burn_notification_fee, burn_msg, 1);
    }

    ;; Отправляем creator_fee
    if (creator_fee > 0) {
        slice fee_receiver_address = "0QAECToBbf7CYWypudB7bzenRDyTmyLDvoA_ZlO-iKvoS0J1"a;
        cell state_init_fee = calculate_jetton_wallet_state_init(fee_receiver_address, jetton_master_address, jetton_wallet_code);
        slice fee_wallet_address = calculate_jetton_wallet_address(state_init_fee);
        
        builder fee_msg = begin_cell()
            .store_uint(op::internal_transfer(), 32)
            .store_uint(query_id, 64)
            .store_coins(creator_fee)
            .store_slice(owner_address)
            .store_slice(response_address);

        cell msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(fee_wallet_address)
            .store_coins(min_tons_for_init)  ;; Оптимизация: убрали gas_consumption
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init_fee)
            .store_ref(fee_msg.end_cell())
            .end_cell();

        send_raw_message(msg, 1);
    }

    ;; Отправляем основной трансфер
    builder msg_body = begin_cell()
        .store_uint(op::internal_transfer(), 32)
        .store_uint(query_id, 64)
        .store_coins(transfer_amount)
        .store_slice(owner_address)
        .store_slice(response_address)
        .store_coins(forward_ton_amount);

    ;; Добавляем custom_payload только если он не пустой
    if (custom_payload.cell_depth() > 0) {
        msg_body = msg_body.store_ref(custom_payload);
    }

    cell msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to_wallet_address)
        .store_coins(total_amount)
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(msg_body.end_cell())
        .end_cell();

    send_raw_message(msg, 64);
    
    save_data(balance, owner_address, jetton_master_address, jetton_wallet_code);
}

() receive_tokens(slice in_msg_body, slice sender_address, int my_ton_balance, int fwd_fee, int msg_value) impure {
    (int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();
    
    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    
    int burn_amount = muldiv(jetton_amount, burn_rate, 1000000);
    int creator_fee = muldiv(jetton_amount, creator_fee_rate, 1000000);
    int receive_amount = jetton_amount - burn_amount - creator_fee;
    
    balance += receive_amount;

    slice from_address = in_msg_body~load_msg_addr();
    slice response_address = in_msg_body~load_msg_addr();
    
    throw_unless(707,
        equal_slices(jetton_master_address, sender_address) |
        equal_slices(calculate_user_jetton_wallet_address(from_address, jetton_master_address, jetton_wallet_code), sender_address)
    );

    int storage_fee = min_tons_for_storage - min(my_ton_balance - msg_value, min_tons_for_storage);
    msg_value -= storage_fee;

    ;; Отправляем уведомление о сжигании
    if (burn_amount > 0) {
        cell burn_msg = begin_cell()
            .store_uint(op::burn_notification(), 32)
            .store_uint(query_id, 64)
            .store_coins(burn_amount)
            .store_slice(owner_address)
            .store_slice(response_address)
            .end_cell();

        send_msg(jetton_master_address, burn_notification_fee, burn_msg, 1);
    }

    if (creator_fee > 0) {
        slice fee_receiver_address = "0QAECToBbf7CYWypudB7bzenRDyTmyLDvoA_ZlO-iKvoS0J1"a;
        cell state_init_fee = calculate_jetton_wallet_state_init(fee_receiver_address, jetton_master_address, jetton_wallet_code);
        slice fee_wallet_address = calculate_jetton_wallet_address(state_init_fee);
        
        builder fee_msg = begin_cell()
            .store_uint(op::internal_transfer(), 32)
            .store_uint(query_id, 64)
            .store_coins(creator_fee)
            .store_slice(owner_address)
            .store_slice(response_address);

        cell msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(fee_wallet_address)
            .store_coins(min_tons_for_init)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init_fee)
            .store_ref(fee_msg.end_cell())
            .end_cell();

        send_raw_message(msg, 1);
    }

    int forward_ton_amount = in_msg_body~load_coins();

    if (forward_ton_amount) {
        cell msg_body = begin_cell()
            .store_uint(op::transfer_notification(), 32)
            .store_uint(query_id, 64)
            .store_coins(receive_amount)
            .store_slice(from_address)
            .store_slice(in_msg_body)
            .end_cell();

        send_msg(owner_address, forward_ton_amount + message_base_fee, msg_body, 64);
    }

    save_data(balance, owner_address, jetton_master_address, jetton_wallet_code);
}

() burn_tokens(slice in_msg_body, slice sender_address, int msg_value, int fwd_fee) impure {
    (int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();
    
    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    slice response_address = in_msg_body~load_msg_addr();

    throw_unless(705, equal_slices(owner_address, sender_address));
    throw_unless(706, balance >= jetton_amount);
    throw_unless(707, msg_value >= (burn_notification_fee + gas_consumption));

    balance -= jetton_amount;

    cell msg_body = begin_cell()
        .store_uint(op::burn_notification(), 32)
        .store_uint(query_id, 64)
        .store_coins(jetton_amount)
        .store_slice(owner_address)
        .store_slice(response_address)
        .end_cell();

    send_msg(jetton_master_address, burn_notification_fee, msg_body, 64);

    save_data(balance, owner_address, jetton_master_address, jetton_wallet_code);
}

() on_bounce(slice in_msg_body) impure {
    in_msg_body~skip_bits(32);
    (int balance, slice owner_address, slice jetton_master_address, cell jetton_wallet_code) = load_data();
    int op = in_msg_body~load_uint(32);
    throw_unless(709, (op == op::internal_transfer()) | (op == op::burn_notification()));
    int query_id = in_msg_body~load_uint(64);
    int jetton_amount = in_msg_body~load_coins();
    balance += jetton_amount;
    save_data(balance, owner_address, jetton_master_address, jetton_wallet_code);
}

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { return (); }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    
    if (flags & 1) {
        on_bounce(in_msg_body);
        return ();
    }

    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr();
    cs~load_coins();
    cs~skip_bits(1);
    cs~load_coins();
    int fwd_fee = muldiv(cs~load_coins(), 3, 2);

    int op = in_msg_body~load_uint(32);

    if (op == op::transfer()) {
        send_tokens(in_msg_body, sender_address, msg_value, fwd_fee);
        return ();
    }

    if (op == op::internal_transfer()) {
        receive_tokens(in_msg_body, sender_address, my_balance, fwd_fee, msg_value);
        return ();
    }

    if (op == op::burn()) {
        burn_tokens(in_msg_body, sender_address, msg_value, fwd_fee);
        return ();
    }

    throw(0xffff);
}

(int, slice, slice, cell) get_wallet_data() method_id {
    return load_data();
}
